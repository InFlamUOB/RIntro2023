# Extra tutorials 1: Data Types - Cats

We can load this into R via the following:

```{r}
cats <- read.csv(file = "feline-data.csv", stringsAsFactors = TRUE)
cats
```

The `read.table` function is used for reading in tabular data stored in a text file where the columns of data are separated by punctuation characters such as CSV files (csv = comma-separated values). Tabs and commas are the most common punctuation characters used to separate or delimit data points in csv files. For convenience R provides 2 other versions of `read.table`. These are: `read.csv` for files where the data are separated with commas and `read.delim` for files where the data are separated with tabs. Of these three functions `read.csv` is the most commonly used. If needed it is possible to override the default delimiting punctuation marks for both `read.csv` and `read.delim`.

We can begin exploring our dataset right away, pulling out columns by specifying them using the `$` operator:

```{r}
cats$weight
cats$coat
```

We can do other operations on the columns:

```{r}
## Say we discovered that the scale weighs two Kg light:
cats$weight + 2
paste("My cat is", cats$coat)
```

But what about

```{r}
cats$weight + cats$coat
```

Understanding what happened here is key to successfully analyzing data in R.

## Data Types

If you guessed that the last command will return an error because `2.1` plus `"black"` is nonsense, you're right - and you already have some intuition for an important concept in programming called *data types*. We can ask what type of data something is:

```{r}
typeof(cats$weight)
str(cats$weight)
```

There are 5 main types: `double`, `integer`, `complex`, `logical` and `character`.

```{r}
typeof(3.14)
typeof(1L) # The L suffix forces the number to be an integer, since by default R uses float numbers
typeof(1+1i)
typeof(TRUE)
typeof('banana')
```

No matter how complicated our analyses become, all data in R is interpreted as one of these basic data types. This strictness has some really important consequences.

What happened? When R reads a csv file into one of these tables, it insists that everything in a column be the same basic type; if it can't understand *everything* in the column as a double, then *nobody* in the column gets to be a double. The table that R loaded our cats data into is something called a *data.frame*, and it is our first example of something called a *data structure* - that is, a structure which R knows how to build out of the basic data types.

## Vectors and Type Coercion

To better understand this behavior, let's meet another of the data structures: the *vector*.

```{r}
my_vector <- vector(length = 3)
my_vector
```

A vector in R is essentially an ordered list of things, with the special condition that *everything in the vector must be the same basic data type*. If you don't choose the datatype, it'll default to `logical`; or, you can declare an empty vector of whatever type you like.

```{r}
another_vector <- vector(mode='character', length=3)
another_vector
```

You can check if something is a vector:

```{r}
str(another_vector)
```

The somewhat cryptic output from this command indicates the basic data type found in this vector - in this case `chr`, character; an indication of the number of things in the vector - actually, the indexes of the vector, in this case `[1:3]`; and a few examples of what's actually in the vector - in this case empty character strings. If we similarly do

```{r}
str(cats$weight)
```

we see that `cats$weight` is a vector, too - *the columns of data we load into R data.frames are all vectors*, and that's the root of why R forces everything in a column to be the same basic data type.

> ## Discussion 1
>
> Why is R so opinionated about what we put in our columns of data? How does this help us?
>
> > ## Discussion 1
> >
> > By keeping everything in a column the same, we allow ourselves to make simple assumptions about our data; if you can interpret one entry in the column as a number, then you can interpret *all* of them as numbers, so we don't have to check every time. This consistency is what people mean when they talk about *clean data*; in the long run, strict consistency goes a long way to making our lives easier in R. {: .solution} {: .discussion}

You can also make vectors with explicit contents with the combine function:

```{r}
combine_vector <- c(2,6,3)
combine_vector
```

Given what we've learned so far, what do you think the following will produce?

```{r}
quiz_vector <- c(2,6,'3')
```

This is something called *type coercion*, and it is the source of many surprises and the reason why we need to be aware of the basic data types and how R will interpret them. When R encounters a mix of types (here numeric and character) to be combined into a single vector, it will force them all to be the same type. Consider:

```{r}
coercion_vector <- c('a', TRUE)
coercion_vector
another_coercion_vector <- c(0, TRUE)
another_coercion_vector
```

The coercion rules go: `logical` -\> `integer` -\> `numeric` -\> `complex` -\> `character`, where -\> can be read as *are transformed into*. You can try to force coercion against this flow using the `as.` functions:

```{r}
character_vector_example <- c('0','2','4')
character_vector_example
character_coerced_to_numeric <- as.numeric(character_vector_example)
character_coerced_to_numeric
numeric_coerced_to_logical <- as.logical(character_coerced_to_numeric)
numeric_coerced_to_logical
```

As you can see, some surprising things can happen when R forces one basic data type into another! Nitty-gritty of type coercion aside, the point is: if your data doesn't look like what you thought it was going to look like, type coercion may well be to blame; make sure everything is the same type in your vectors and your columns of data.frames, or you will get nasty surprises!

But coercion can also be very useful! For example, in our `cats` data `likes_string` is numeric, but we know that the 1s and 0s actually represent `TRUE` and `FALSE` (a common way of representing them). We should use the `logical` datatype here, which has two states: `TRUE` or `FALSE`, which is exactly what our data represents. We can 'coerce' this column to be `logical` by using the `as.logical` function:

```{r}
cats$likes_string
cats$likes_string <- as.logical(cats$likes_string)
cats$likes_string
```

The combine function, `c()`, will also append things to an existing vector:

```{r}
ab_vector <- c('a', 'b')
ab_vector
combine_example <- c(ab_vector, 'SWC')
combine_example
```

Finally, you can give names to elements in your vector:

```{r}
my_example <- 5:8
names(my_example) <- c("a", "b", "c", "d")
my_example
names(my_example)
```

> ## Tip: Renaming data frame columns
>
> Data frames have column names, which can be accessed with the `names()` function.
>
> ```{r}
> names(cats)
> ```
>
> If you want to rename the second column of `cats`, you can assign a new name to the second element of `names(cats)`.
>
> ```{r}
> names(cats)[2] <- "weight_kg"
> cats
> ```
>
> {: .callout}

```{r, include=FALSE}
# reverting cats back to original version
cats <-  read.csv("feline-data.csv")
```

## Factors

Another important data structure is called a *factor*. Factors usually look like character data, but are typically used to represent categorical information. For example, let's make a vector of strings labelling cat colorations for all the cats in our study:

```{r}
coats <- c('tabby', 'tortoiseshell', 'tortoiseshell', 'black', 'tabby')
coats
str(coats)
```

We can turn a vector into a factor like so:

```{r}
CATegories <- factor(coats)
class(CATegories)
str(CATegories)
```

Now R has noticed that there are three possible categories in our data - but it also did something surprising; instead of printing out the strings we gave it, we got a bunch of numbers instead. R has replaced our human-readable categories with numbered indices under the hood, this is necessary as many statistical calculations utilise such numerical representations for categorical data:

```{r}
typeof(coats)
typeof(CATegories)
```

## Lists

Another data structure you'll want in your bag of tricks is the `list`. A list is simpler in some ways than the other types, because you can put anything you want in it:

```{r}
list_example <- list(1, "a", TRUE, 1+4i)
list_example
another_list <- list(title = "Numbers", numbers = 1:10, data = TRUE )
another_list
```

We can now understand something a bit surprising in our data.frame; what happens if we run:

```{r}
typeof(cats)
```

We see that data.frames look like lists 'under the hood' - this is because a data.frame is really a list of vectors and factors, as they have to be - in order to hold those columns that are a mix of vectors and factors, the data.frame needs something a bit more flexible than a vector to put all the columns together into a familiar table. In other words, a `data.frame` is a special list in which all the vectors must have the same length.

In our `cats` example, we have an integer, a double and a logical variable. As we have seen already, each column of data.frame is a vector.

```{r}
cats$coat
cats[,1]
typeof(cats[,1])
str(cats[,1])
```

Each row is an *observation* of different variables, itself a data.frame, and thus can be composed of elements of different types.

```{r}
cats[1,]
typeof(cats[1,])
str(cats[1,])
```

> ## Challenge 3
>
> There are several subtly different ways to call variables, observations and elements from data.frames:
>
> -   `cats[1]`
> -   `cats[[1]]`
> -   `cats$coat`
> -   `cats["coat"]`
> -   `cats[1, 1]`
> -   `cats[, 1]`
> -   `cats[1, ]`
>
> Try out these examples and explain what is returned by each one.
>
> *Hint:* Use the function `typeof()` to examine what is returned in each case.
>
> > ## Solution to Challenge 3
> >
> > ```{r, eval=TRUE, echo=TRUE}
> > cats[1]
> > ```
> >
> > We can think of a data frame as a list of vectors. The single brace `[1]` returns the first slice of the list, as another list. In this case it is the first column of the data frame.
> >
> > ```{r, eval=TRUE, echo=TRUE}
> > cats[[1]]
> > ```
> >
> > The double brace `[[1]]` returns the contents of the list item. In this case it is the contents of the first column, a *vector* of type *factor*.
> >
> > ```{r, eval=TRUE, echo=TRUE}
> > cats$coat
> > ```
> >
> > This example uses the `$` character to address items by name. *coat* is the first column of the data frame, again a *vector* of type *factor*.
> >
> > ```{r, eval=TRUE, echo=TRUE}
> > cats["coat"]
> > ```
> >
> > Here we are using a single brace `["coat"]` replacing the index number with the column name. Like example 1, the returned object is a *list*.
> >
> > ```{r, eval=TRUE, echo=TRUE}
> > cats[1, 1]
> > ```
> >
> > This example uses a single brace, but this time we provide row and column coordinates. The returned object is the value in row 1, column 1. The object is an *integer* but because it is part of a *vector* of type *factor*, R displays the label "calico" associated with the integer value.
> >
> > ```{r, eval=TRUE, echo=TRUE}
> > cats[, 1]
> > ```
> >
> > Like the previous example we use single braces and provide row and column coordinates. The row coordinate is not specified, R interprets this missing value as all the elements in this *column* *vector*.
> >
> > ```{r, eval=TRUE, echo=TRUE}
> > cats[1, ]
> > ```
> >
> > Again we use the single brace with row and column coordinates. The column coordinate is not specified. The return value is a *list* containing all the values in the first row. {: .solution} {: .challenge}

## Matrices

Last but not least is the matrix. We can declare a matrix full of zeros:

```{r}
matrix_example <- matrix(0, ncol=6, nrow=3)
matrix_example
```

And similar to other data structures, we can ask things about our matrix:

```{r}
class(matrix_example)
typeof(matrix_example)
str(matrix_example)
dim(matrix_example)
nrow(matrix_example)
ncol(matrix_example)
```

> ## Challenge 4
>
> What do you think will be the result of `length(matrix_example)`? Try it. Were you right? Why / why not?
>
> > ## Solution to Challenge 4
> >
> > What do you think will be the result of `length(matrix_example)`?
> >
> > ```{r}
> > matrix_example <- matrix(0, ncol=6, nrow=3)
> > length(matrix_example)
> > ```
> >
> > Because a matrix is a vector with added dimension attributes, `length` gives you the total number of elements in the matrix. {: .solution} {: .challenge}

> ## Challenge 6
>
> Create a list of length two containing a character vector for each of the sections in this part of the workshop:
>
> -   Data types
> -   Data structures
>
> Populate each character vector with the names of the data types and data structures we've seen so far.
>
> > ## Solution to Challenge 6
> >
> > ```{r}
> > dataTypes <- c('double', 'complex', 'integer', 'character', 'logical')
> > dataStructures <- c('data.frame', 'vector', 'factor', 'list', 'matrix')
> > answer <- list(dataTypes, dataStructures)
> > ```
> >
> > Note: it's nice to make a list in big writing on the board or taped to the wall listing all of these types and structures - leave it up for the rest of the workshop to remind people of the importance of these basics.
> >
> > {: .solution} {: .challenge}
