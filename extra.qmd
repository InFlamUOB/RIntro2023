## General

## Reading Help files

R, and every package, provide help files for functions. The general syntax to search for help on any function, "function_name", from a specific function that is in a package loaded into your namespace (your interactive R session):

```{r, eval=FALSE}
?function_name
help(function_name)
```

## Getting help on packages

Many packages come with "vignettes": tutorials and extended example documentation. Without any arguments, `vignette()` will list all vignettes for all installed packages; `vignette(package="package-name")` will list all available vignettes for `package-name`, and `vignette("vignette-name")` will open the specified vignette.

If a package doesn't have any vignettes, you can usually find help by typing `help("package-name")`.

RStudio also has a set of excellent [cheatsheets](https://rstudio.com/resources/cheatsheets/) for many packages.

## When you kind of remember the function

If you're not sure what package a function is in, or how it's specifically spelled you can do a fuzzy search:

```{r, eval=FALSE}
??function_name
```

A fuzzy search is when you search for an approximate string match. For example, you may remember that the function to set your working directory includes "set" in its name. You can do a fuzzy search to help you identify the function:

```{r, eval=FALSE}
??set
```

## When you have no idea where to begin

If you don't know what function or package you need to use [CRAN Task Views](http://cran.at.r-project.org/web/views) is a specially maintained list of packages grouped into fields. This can be a good starting point.

## When your code doesn't work: seeking help from your peers

If you're having trouble using a function, 9 times out of 10, the answers you are seeking have already been answered on [Stack Overflow](http://stackoverflow.com/). You can search using the `[r]` tag. Please make sure to see their page on [how to ask a good question.](https://stackoverflow.com/help/how-to-ask)

```{r}
sessionInfo()
```

Will print out your current version of R, as well as any packages you have loaded. This can be useful for others to help reproduce and debug your issue.

## Other ports of call

-   [Quick R](http://www.statmethods.net/)
-   [RStudio cheat sheets](http://www.rstudio.com/resources/cheatsheets/)
-   [Cookbook for R](http://www.cookbook-r.com/)

------------------------------------------------------------------------

# Save the data and directories

One of R's most powerful features is its ability to deal with tabular data - such as you may already have in a spreadsheet or a CSV file. Let's start by making a toy dataset called `feline-data.csv`:

```{r}
cats <- data.frame(coat = c("calico", "black", "tabby"),
                    weight = c(2.1, 5.0, 3.2),
                    likes_string = c(1, 0, 1))
write.csv(x = cats, file = "feline-data.csv", row.names = FALSE)
```

The contents of the new file, `feline-data.csv`:

```{r, eval=FALSE}
coat,weight,likes_string
calico,2.1,1
black,5.0,0
tabby,3.2,1
```

> ## Tip: Editing Text files in R
>
> Alternatively, you can create `feline-data.csv` using a text editor (Nano), or within RStudio with the **File -\> New File -\> Text File** menu item. {: .callout}

We can load this into R via the following:

```{r}
cats <- read.csv(file = "feline-data.csv", stringsAsFactors = TRUE)
cats
```

The `read.table` function is used for reading in tabular data stored in a text file where the columns of data are separated by punctuation characters such as CSV files (csv = comma-separated values). Tabs and commas are the most common punctuation characters used to separate or delimit data points in csv files. For convenience R provides 2 other versions of `read.table`. These are: `read.csv` for files where the data are separated with commas and `read.delim` for files where the data are separated with tabs. Of these three functions `read.csv` is the most commonly used. If needed it is possible to override the default delimiting punctuation marks for both `read.csv` and `read.delim`.

> Explore getting working directory and setting working directory as well as try out storing your data in different folders and retrieving it, making sure that you understand what a **path** is, **directory/file relationships** how to change them.

# Handling projects (extra)

One of the most powerful and useful aspects of RStudio is its project management functionality. We'll be using this today to create a self-contained, reproducible project.

> ## Challenge 1: Creating a self-contained project
>
> We're going to create a new project in RStudio:
>
> 1.  Click the "File" menu button, then "New Project".
> 2.  Click "New Directory".
> 3.  Click "New Project".
> 4.  Type in the name of the directory to store your project, e.g. "my_project".
> 5.  If available, select the checkbox for "Create a git repository."
> 6.  Click the "Create Project" button. {: .challenge}

The simplest way to open an RStudio project once it has been created is to click through your file system to get to the directory where it was saved and double click on the `.Rproj` file. This will open RStudio and start your R session in the same directory as the `.Rproj` file. All your data, plots and scripts will now be relative to the project directory. RStudio projects have the added benefit of allowing you to open multiple projects at the same time each open to its own project directory. This allows you to keep multiple projects open without them interfering with each other.

> ## Challenge 2: Opening an RStudio project through the file system
>
> 1.  Exit RStudio.
> 2.  Navigate to the directory where you created a project in Challenge 1.
> 3.  Double click on the `.Rproj` file in that directory. {: .challenge}
