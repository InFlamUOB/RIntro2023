# Extra tutorials 2: Data Types - subsetting cats and gapminder

At this point, you've seen it all: in the last lesson, we toured all the basic data types and data structures in R. Everything you do will be a manipulation of those tools. But most of the time, the star of the show is the data frame---the table that we created by loading information from a csv file. In this lesson, we'll learn a few more things about working with data frames.

## Adding columns and rows in data frames

We already learned that the columns of a data frame are vectors, so that our data are consistent in type throughout the columns. As such, if we want to add a new column, we can start by making a new vector:

```{r, echo = FALSE}
cats <- read.csv("feline-data.csv", stringsAsFactors = TRUE)
```

```{r}
age <- c(2, 3, 5)
cats
```

We can then add this as a column via:

```{r}
cbind(cats, age)
```

Note that if we tried to add a vector of ages with a different number of entries than the number of rows in the data frame, it would fail:

```{r, error=TRUE}
age <- c(2, 3, 5, 12)
cbind(cats, age)

age <- c(2, 3)
cbind(cats, age)
```

Why didn't this work? Of course, R wants to see one element in our new column for every row in the table:

```{r}
nrow(cats)
length(age)
```

So for it to work we need to have `nrow(cats)` = `length(age)`. Let's overwrite the content of cats with our new data frame.

```{r}
age <- c(2, 3, 5)
cats <- cbind(cats, age)
```

Now how about adding rows? We already know that the rows of a data frame are lists:

```{r}
newRow <- list("tortoiseshell", 3.3, TRUE, 9)
cats <- rbind(cats, newRow)
```

Looks like our attempt to use the `rbind()` function returns a warning. Recall that, unlike errors, warnings do not necessarily stop a function from performing its intended action. You can confirm this by taking a look at the `cats` data frame.

```{r}
cats
```

Notice that not only did we successfully add a new row, but there is `NA` in the column *coats* where we expected "tortoiseshell" to be. Why did this happen?

## Factors

For an object containing the data type `factor`, each different value represents what is called a `level`. In our case, the `factor` "coat" has 3 levels: "black", "calico", and "tabby". R will only accept values that match one of the levels. If you add a new value, it will become `NA`.

The warning is telling us that we unsuccessfully added "tortoiseshell" to our *coat* factor, but 3.3 (a numeric), TRUE (a logical), and 9 (a numeric) were successfully added to *weight*, *likes_string*, and *age*, respectively, since those variables are not factors. To successfully add a cat with a "tortoiseshell" *coat*, add "tortoiseshell" as a possible *level* of the factor:

```{r}
levels(cats$coat)
levels(cats$coat) <- c(levels(cats$coat), "tortoiseshell")
cats <- rbind(cats, list("tortoiseshell", 3.3, TRUE, 9))
```

Alternatively, we can change a factor into a character vector; we lose the handy categories of the factor, but we can subsequently add any word we want to the column without babysitting the factor levels:

```{r}
str(cats)
cats$coat <- as.character(cats$coat)
str(cats)
```

## Removing rows

We now know how to add rows and columns to our data frame in R---but in our first attempt to add a "tortoiseshell" cat to the data frame we have accidentally added a garbage row:

```{r}
cats
```

We can ask for a data frame minus this offending row:

```{r}
cats[-4, ]
```

Notice the comma with nothing after it to indicate that we want to drop the entire fourth row.

Note: we could also remove both new rows at once by putting the row numbers inside of a vector: `cats[c(-4,-5), ]`

Alternatively, we can drop all rows with `NA` values:

```{r}
na.omit(cats)
```

Let's reassign the output to `cats`, so that our changes will be permanent:

```{r}
cats <- na.omit(cats)
```

## Removing columns

We can also remove columns in our data frame. What if we want to remove the column "age". We can remove it in two ways, by variable number or by index.

```{r}
cats[,-4]
```

Notice the comma with nothing before it, indicating we want to keep all of the rows.

Alternatively, we can drop the column by using the index name and the `%in%` operator. The `%in%` operator goes through each element of its left argument, in this case the names of `cats`, and asks, "Does this element occur in the second argument?"

```{r}
drop <- names(cats) %in% c("age")
cats[,!drop]
```

We will cover subsetting with logical operators like `%in%` in more detail in the next episode. See the section [Subsetting through other logical operations](/06-data-subsetting/#logical-operations)

## Appending to a data frame

The key to remember when adding data to a data frame is that *columns are vectors and rows are lists.* We can also glue two data frames together with `rbind`:

```{r}
cats <- rbind(cats, cats)
cats
```

But now the row names are unnecessarily complicated. We can remove the rownames, and R will automatically re-name them sequentially:

```{r}
rownames(cats) <- NULL
cats
```

> ## Challenge 2
>
> You can create a new data frame right from within R with the following syntax:
>
> ```{r}
> df <- data.frame(id = c("a", "b", "c"),
>                  x = 1:3,
>                  y = c(TRUE, TRUE, FALSE)
> )
> ```
>
> Make a data frame that holds the following information for yourself:
>
> -   first name
> -   last name
> -   lucky number
>
> Then use `rbind` to add an entry for the people sitting beside you. Finally, use `cbind` to add a column with each person's answer to the question, "Is it time for coffee break?"
>
> > ## Solution to Challenge 2
> >
> > ```{r}
> > df <- data.frame(first = c("Grace"),
> >                  last = c("Hopper"),
> >                  lucky_number = c(0))
> > df <- rbind(df, list("Marie", "Curie", 238) )
> > df <- cbind(df, coffeetime = c(TRUE,TRUE))
> > ```
> >
> > {: .solution} {: .challenge}

## Realistic example

So far, you have seen the basics of manipulating data frames with our cat data; now let's use those skills to digest a more realistic dataset. Let's read in the `gapminder` dataset

```{r}
library(gapminder) 
gapminder <- gapminder
```

> Let's investigate gapminder a bit; the first thing we should always do is check out what the data looks like with `str`:

```{r}
str(gapminder)
```

An additional method for examining the structure of gapminder is to use the `summary` function. This function can be used on various objects in R. For data frames, `summary` yields a numeric, tabular, or descriptive summary of each column. Factor columns are summarized by the number of items in each level, numeric or integer columns by the descriptive statistics (quartiles and mean), and character columns by its length, class, and mode.

```{r}
summary(gapminder$country)
```

```{r}
nrow(gapminder)
ncol(gapminder)
```

Or, both at once:

```{r}
dim(gapminder)
```

We'll also likely want to know what the titles of all the columns are, so we can ask for them later:

```{r}
colnames(gapminder)
```

At this stage, it's important to ask ourselves if the structure R is reporting matches our intuition or expectations; do the basic data types reported for each column make sense? If not, we need to sort any problems out now before they turn into bad surprises down the road, using what we've learned about how R interprets data, and the importance of *strict consistency* in how we record our data.

Once we're happy that the data types and structures seem reasonable, it's time to start digging into our data proper. Check out the first few lines:

```{r}
head(gapminder)
```

> ## Challenge 3
>
> It's good practice to also check the last few lines of your data and some in the middle. How would you do this?
>
> Searching for ones specifically in the middle isn't too hard, but we could ask for a few lines at random. How would you code this?
>
> > ## Solution to Challenge 3
> >
> > To check the last few lines it's relatively simple as R already has a function for this:
> >
> > ```         
> > tail(gapminder)
> > tail(gapminder, n = 15)
> > ```

## Challenge 5

> Read the output of `str(gapminder)` again; this time, use what you've learned about factors, lists and vectors, as well as the output of functions like `colnames` and `dim` to explain what everything that `str` prints out for gapminder means. If there are any parts you can't interpret, discuss with your neighbors!
>
> > ## Solution to Challenge 5
> >
> > The object `gapminder` is a data frame with columns - `country` and `continent` are factors. - `year` is an integer vector. - `pop`, `lifeExp`, and `gdpPercap` are numeric vectors.
> >
> > {: .solution} {: .challenge}

## Data frames

Remember the data frames are lists underneath the hood, so similar rules apply. However they are also two dimensional objects:

`[` with one argument will act the same way as for lists, where each list element corresponds to a column. The resulting object will be a data frame:

```{r}
head(gapminder[3])
```

Similarly, `[[` will act to extract *a single column*:

```{r}
head(gapminder[["lifeExp"]])
```

And `$` provides a convenient shorthand to extract columns by name:

```{r}
head(gapminder$year)
```

With two arguments, `[` behaves the same way as for matrices:

```{r}
gapminder[1:3,]
```

If we subset a single row, the result will be a data frame (because the elements are mixed types):

```{r}
gapminder[3,]
```

But for a single column the result will be a vector (this can be changed with the third argument, `drop = FALSE`).

> ## Challenge 7
>
> Fix each of the following common data frame subsetting errors:
>
> 1.  Extract observations collected for the year 1957
>
>     ```{r, eval=FALSE}
>     gapminder[gapminder$year = 1957,]
>     ```
>
> 2.  Extract all columns except 1 through to 4
>
>     ```{r, eval=FALSE}
>     gapminder[,-1:4]
>     ```
>
> 3.  Extract the rows where the life expectancy is longer the 80 years
>
>     ```{r, eval=FALSE}
>     gapminder[gapminder$lifeExp > 80]
>     ```
>
> 4.  Extract the first row, and the fourth and fifth columns (`continent` and `lifeExp`).
>
>     ```{r, eval=FALSE}
>     gapminder[1, 4, 5]
>     ```
>
> 5.  Advanced: extract rows that contain information for the years 2002 and 2007
>
>     ```{r, eval=FALSE}
>     gapminder[gapminder$year == 2002 | 2007,]
>     ```
>
> > ## Solution to challenge 7
> >
> > Fix each of the following common data frame subsetting errors:
> >
> > 1.  Extract observations collected for the year 1957
> >
> >     ```{r, eval=FALSE}
> >     # gapminder[gapminder$year = 1957,]
> >     gapminder[gapminder$year == 1957,]
> >     ```
> >
> > 2.  Extract all columns except 1 through to 4
> >
> >     ```{r, eval=FALSE}
> >     # gapminder[,-1:4]
> >     gapminder[,-c(1:4)]
> >     ```
> >
> > 3.  Extract the rows where the life expectancy is longer than 80 years
> >
> >     ```{r, eval=FALSE}
> >     # gapminder[gapminder$lifeExp > 80]
> >     gapminder[gapminder$lifeExp > 80,]
> >     ```
> >
> > 4.  Extract the first row, and the fourth and fifth columns (`continent` and `lifeExp`).
> >
> >     ```{r, eval=FALSE}
> >     # gapminder[1, 4, 5]
> >     gapminder[1, c(4, 5)]
> >     ```
> >
> > 5.  Advanced: extract rows that contain information for the years 2002 and 2007
> >
> >     ```{r, eval=FALSE}
> >     # gapminder[gapminder$year == 2002 | 2007,]
> >     gapminder[gapminder$year == 2002 | gapminder$year == 2007,]
> >     gapminder[gapminder$year %in% c(2002, 2007),]
> >     ```
> >
> >     {: .solution} {: .challenge}

> ## Challenge 8
>
> 1.  Why does `gapminder[1:20]` return an error? How does it differ from `gapminder[1:20, ]`?
>
> 2.  Create a new `data.frame` called `gapminder_small` that only contains rows 1 through 9 and 19 through 23. You can do this in one or two steps.
>
> > ## Solution to challenge 8
> >
> > 1.  `gapminder` is a data.frame so needs to be subsetted on two dimensions. `gapminder[1:20, ]` subsets the data to give the first 20 rows and all columns.
> >
> > 2.  
> >
> > ```{r}
> > gapminder_small <- gapminder[c(1:9, 19:23),]
> > ```
> >
> > {: .solution} {: .challenge}

------------------------------------------------------------------------
